setup:	mvs r2,0x0 ;var esperando
			mov r0,0x2A ;var devide_id
			mov (0x1),r0
			mov r0,0x2
			mov r1,r0
			mvs r5,0x0
			mov r0,0xE1 ;var hsd0567
			mov io (0x9),r0 ;var r_io_hsd
			mov r0,0x80 ;var rodando
			mov io (0xA),r0 ;var r_io_sd
			mov r0,0x88 ;var dc_lsb
			mov io (0x1C),r0 ;var r_c0
			mov r0,0x13 ;var dc_msb
			mov io (0x1D),r0 ;var r_c1
			mov r0,0x3F ;var soc_ch3_int
			mov io (0x4),r0 ;var r_adc_ctrl_st_lsb
			mov r0,0x1 ;var hint
			mov r15,r0
adc_check:	mov r2,r2
			jz 0x12 ;label adc_check
check_pntr:	mov (r1),r3
			inc r1
			mov r0,0xF ;var adc_stop
			mov io (0x4),r0 ;var r_adc_ctrl_st_lsb
			mov r0,0x87 ;var hab_timer
			mov io (0x1E),r0 ;var r_cont_st
			mvs r2,0x0 ;var esperando
loop_data:	mov r2,r2
			jz 0x1B ;label loop_data
			mvs r2,0x0 ;var esperando
			inc r5
			mov r0,0xA ;var ciclos_data
			cmp r0,r5
			jnz 0x1B ;label loop_data
			mov r0,0x0
			mov io (0x1E),r0 ;var r_cont_st
			mov r0,0x0
			mov r5,r0
			mov r0,0xFF
			cmp r0,r1
			jz 0x2C ;label pre_espera
			mov r0,0x3F ;var soc_ch3_int
			mov io (0x4),r0 ;var r_adc_ctrl_st_lsb
			jmp 0x12 ;label adc_check
pre_espera:	mov r0,0xF ;var adc_stop
			mov io (0x4),r0 ;var r_adc_ctrl_st_lsb
			mvs r0,0x0 ;var esperando
			mov r2,r0
			mov r0,0xE8 ;var dc_lsb_espera
			mov io (0x1C),r0 ;var r_c0
			mov r0,0x3 ;var dc_msb_espera
			mov io (0x1D),r0 ;var r_c1
pre_envio:	mov r0,0x0
			mov io (0x1E),r0 ;var r_cont_st
			mov r0,0x5 ;var hab_int_ext0_bs
			mov io (0x0),r0 ;var r_ctrl_int_st
			mov r0,0xA0
			mov io (0xA),r0 ;var r_io_sd
ext_check:	mov r2,r2
			jz 0x3A ;label ext_check
			mvs r2,0x0 ;var esperando
			mov r0,0x0
			mov r1,r0
check_end:	mov r0,0xFF
			cmp r1,r0
			jz 0x93 ;label end_send
			mov r0,0x0
			mov r8,r0
			mov r5,r0
			mov r0,0x87 ;var hab_timer
			mov io (0x1E),r0 ;var r_cont_st
loop_send:	mov r2,r2
			jz 0x47 ;label loop_send
			mvs r2,0x0 ;var esperando
			inc r5
			mov r0,0x32 ;var ciclos_send
			cmp r0,r5
			jz 0x4F ;label reload
			jmp 0x47 ;label loop_send
reload:	mov r0,0x0
			mov io (0x1E),r0 ;var r_cont_st
			mov r0,0xE8 ;var dc_lsb_espera
			mov io (0x1C),r0 ;var r_c0
			mov r0,0x3 ;var dc_msb_espera
			mov io (0x1D),r0 ;var r_c1
get_data:	inc r1
			mov r0,(r1)
			mov r4,r0
bit_brush:	mov r0,r4
			and r0,0x1 ;var masc_bit_zero
			shl r4,r4
			mov r0,r0
			jz 0x5E ;label pulso_zero
			jnz 0x65 ;label pulso_um
pulso_zero:	mvs r2,0x0 ;var esperando
			mvs r5,0x0
			mov r0,0xA
			mov r6,r0
			mov r0,0x28
			mov r7,r0
			jmp 0x6C ;label set_high
pulso_um:	mvs r2,0x0 ;var esperando
			mvs r5,0x0
			mov r0,0x19
			mov r6,r0
			mov r0,0x19
			mov r7,r0
			jmp 0x6C ;label set_high
set_high:	mov r0,0xE8 ;var dc_lsb_espera
			mov io (0x1C),r0 ;var r_c0
			mov r0,0x3 ;var dc_msb_espera
			mov io (0x1D),r0 ;var r_c1
			mov r0,0x81
			mov io (0xA),r0 ;var r_io_sd
			mvs r5,0x0
			mov r0,0x87 ;var hab_timer
			mov io (0x1E),r0 ;var r_cont_st
loop_high:	mov r2,r2
			jz 0x75 ;label loop_high
			inc r5
			cmp r6,r5
			jz 0x7C ;label set_low
			mvs r2,0x0 ;var esperando
			jmp 0x75 ;label loop_high
set_low:	mov r0,0x0
			mov io (0x1E),r0 ;var r_cont_st
			mov r0,0xE8 ;var dc_lsb_espera
			mov io (0x1C),r0 ;var r_c0
			mov r0,0x3 ;var dc_msb_espera
			mov io (0x1D),r0 ;var r_c1
			mov r0,0x80
			mov io (0xA),r0 ;var r_io_sd
			mvs r5,0x0
			mov r0,0x87 ;var hab_timer
			mov io (0x1E),r0 ;var r_cont_st
loop_low:	mov r2,r2
			jz 0x87 ;label loop_low
			inc r5
			cmp r7,r5
			jz 0x8E ;label bit_check
			mvs r2,0x0 ;var esperando
			jmp 0x87 ;label loop_low
bit_check:	inc r8
			mov r0,0x8
			cmp r0,r8
			jz 0x3F ;label check_end
			jmp 0x58 ;label bit_brush
end_send:	mov r0,0x0
			mov io (0x1E),r0 ;var r_cont_st
			jmp 0x0 ;label setup
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			mov (0x0),r0 ;var mem_r0
			mov io r0,(0x0) ;var r_ctrl_int_st
			cmp r0,0x4 ;var int_adc
			jz 0x3CB ;label intadc
			cmp r0,0x8 ;var int_timer
			jz 0x3D2 ;label inttimer
			cmp r0,0x1 ;var int_ext
			jz 0x3D7 ;label intext
			mov r0,0x40 ;var erro
			mov io (0xA),r0 ;var r_io_sd
			jmp 0x3CA ;var $
intadc:	mvs r2,0x1 ;var interrompeu
			mov io r0,(0x5) ;var r_adc_data_msb
			mov r3,r0
			mov r0,0xF ;var adc_stop
			mov io (0x4),r0 ;var r_adc_ctrl_st_lsb
			mov r0,(0x0) ;var mem_r0
			rets
inttimer:	mvs r2,0x1 ;var interrompeu
			mov r0,0x87 ;var hab_timer
			mov io (0x1E),r0 ;var r_cont_st
			mov r0,(0x0) ;var mem_r0
			rets
intext:	mov (0x0),r0 ;var mem_r0
			mov r0,0x8 ;var des_int_ext0_bs
			mov io (0x0),r0 ;var r_ctrl_int_st
			mvs r2,0x1 ;var interrompeu
			mov r0,(0x0) ;var mem_r0
			rets
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
